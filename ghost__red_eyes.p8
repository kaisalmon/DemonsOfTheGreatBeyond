pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
health_x=0
health_tx=0


function _init()
	palt(14,true)
	palt(0,false)
	
	c_game_logic=cocreate(game_logic)
end
function _draw()
	cls(0)	
	camera()
	local t=player.damaged_at and time()-player.damaged_at
	if(t and t<0.5)camera(rnd(5),rnd(3))
	draw_player_hand()
	draw_hand(opp)
	draw_rows(player.rows)
	draw_rows(opp.rows, true)
	if player.v_hp then
		draw_health(player,100)
		draw_health(opp,0)
	end
	if(game_over) then 
		rectfill(
			0,60,
			128,68,
			8
		)
		print(
			game_over,
			64-#game_over*2,
			62,
			7
		)
	end
	
	if(debug)then
		rectfill(0,0,128,8,0)
		print(debug,0,0,7)
	end
end

function _update()
	update_hand(player.hand,hand_i)
	update_rows()
	health_tx=(player_input!="hand" and -14 or 2)
	if player.damaged_at and time()-player.damaged_at<1
	or opp.damaged_at and time()-opp.damaged_at<1
	or game_over
	then
		health_tx=2
	end
	health_x=lerp(health_x,health_tx,.2)
	if player.v_hp then
		player.v_hp=lerp(player.v_hp, player.hp,.3)
		opp.v_hp=lerp(opp.v_hp, opp.hp,.3)
	end
	if(c_game_logic) then
		coresume(c_game_logic)
  local status=costatus(c_game_logic)
  if status=="dead" then
  	local trace=trace(c_game_logic)
  	if(trace and not game_over)then
  		printh(trace, "_ghost.txt")
	  	extcmd("reset")
	  end
  end
	end
end

function draw_card(c,x,y,actor)
	if c=="endturn" then
		spr(66,x,y,2,2)
		return
	end
	local col  = (actor==opp or actor.mana>=c.cost) and 7 or 6
	pal(7,col)
	spr(64,x,y,2,2)
	if(actor==player)spr(c.s+(time()%1>0.5 and 1 or 0),x+4,y+4,1,1)
	
	pal(7,7)
end

function draw_hand(actor)
	local hand=actor.hand
	for i,hc in ipairs(hand) do
			draw_card(hc.c,hc.x,hc.y,actor)
	end
end
function draw_player_hand()
	draw_hand(player)
	local s_i=
		player_input == "hand" 
		and hand_i 
		or nil

	local s_hc=player.hand[s_i]
	if s_hc then
		local c = s_hc.c
		draw_card(c,s_hc.x,s_hc.y,player)
		spr(16,s_hc.x+5,s_hc.y-6)

		if c=="endturn" then
			print("end turn",s_hc.x+10-2*#"end turn",s_hc.y-12, 7)
		else
			print(c.name,s_hc.x+10 -2*#c.name,s_hc.y-12,c.c or 7)
			local str = s_hc.c.type
			rectfill(64-2*#str,106,64+2*#str,110,0)
			print(str,64-2*#str,106,types[c.type])
			str = c.cost.." mana"
			rectfill(64-2*#str,106+7,64+2*#str,117,0)
			print(str,64-2*#str,106+7,7)
			str = c.atk.."/"..c.def..(
				c.desc and ", "..c.desc or ""
			)
			clip(22,0,84,128)
	
			local x = 64-2*#str
			if #str > 17 then
			hand_i_changed_at=hand_i_changed_at or 0
				local t=(time()-hand_i_changed_at)
				t %= (#str - 17)/3
				x=30-12*t
				
			end
			print(str,x,106+14,7)
			clip()
		end
	end
end

function add_to_hand(hand,c)
	sfx(9)
	local i = #hand+1
	if hand==player.hand then
		i=#hand > 0 and #hand or 1
	end
	add(hand,{
		c=c,
		x=124,
		y=64
	}, i)
	
end

function update_hand()
	local s_i=
		player_input == "hand" 
		and hand_i 
		or #player.hand/2
	for i,hc in ipairs(player.hand) do
			local p = (i-s_i)/#player.hand
			local cx=64-18/2
			local w=18-#player.hand*.7

			w=max(8,w)
			local tx,ty = 
				cx+(i-s_i)*w,
				89+p*p*20
			if	player_input != "hand" then
				ty+=30
			end
	
			hc.x=lerp(hc.x,tx,0.1)
			hc.y=lerp(hc.y,ty,0.1)
	end
	for i,hc in ipairs(opp.hand) do
				local p = (i-#opp.hand/2-.5)/#opp.hand
				local cx=64-18/2
				local w=18-#opp.hand*.7
				w=max(8,w)
				local tx,ty = 
					cx+(i-#opp.hand/2)*w,
					10-p*p*20
				if	player_input != "hand" then
					ty-=18
				end
				hc.x=lerp(hc.x,tx,0.1)
				hc.y=lerp(hc.y,ty,0.1)
		end
	if player_input=="hand" then
		if(btnp(➡️)) then 
			hand_i+=1
			hand_i_changed_at=time()
		end
		if(btnp(⬅️)) then
			hand_i-=1
			hand_i_changed_at=time()
		end
		if(hand_i < 1) hand_i = #player.hand
		if(hand_i > #player.hand) hand_i = 1
	end
end

function draw_rows(rows,flip)
	for i,row in ipairs(rows) do
		if not flip and player_input=="rows" then
			if row_i == i then
				spr(32,10*(1+#row),40+12*i,1,1,true)
			elseif row_i == -i then
				spr(32,0,40+12*i)
			end
		end
		for j,rc in ipairs(row) do
			local x,y=0+10*j,40+12*i
			if rc.attacking_at then
				local t=time()-rc.attacking_at
				if t<.5 then
					x-=t*(t-.5)*100
				end
			end
			
			if rc.damaged_at then
				local t=time() - rc.damaged_at
				if t < .6 then
					x+=rnd()*3-1
				end
			end
			if rc.possessed_at then
				local t=time() - rc.possessed_at
				if t < .5 then
					y+=t*(t-.5)*70
				end
			end
			if(flip)x=128-x
			
			if rc.hp < rc.c.def then
				line(x,y-2,x+7,y-2,8)	
				
				if rc.hp>0 then
					line(x,y-2,x+7*rc.hp/rc.c.def,y-2,7)	
				end
			end
			
			
			local t=time()-rc.summoned_at
			local pw=100-140*t
			if pw > 0 then 
				local ph=pw*.6
				draw_pentagram(
					x-pw+4,y-ph+8,
					x+pw+4,y+ph+8,
					t*t,8)
			end
			if t > .6 then
				palt(0,true)
				if t < .8 then
					pal(7,8)
				end
				local idle=time()%1>.5 and 1 or 0
				if rc.c.type=="object" and not rc.possessed then
					idle=0
				end
				spr(rc.c.s+idle,x,y,1,1,flip)
				palt(0,false)
				pal(7,7)
			end
		
			if rc.ability_at then
				local t=time()-rc.ability_at
				if t<.5 then
						local r=t*20
						oval(x-r+4,y-r+4,x+r+4,y+r+4,7)
				end
			end
		end
	end
end

function update_rows()
	if player_input=="rows" then
		local r_sng,i=sgn(row_i),abs(row_i)
		if(btnp(⬆️)) i-=1
		if(btnp(⬇️)) i+=1
		if(btnp(➡️) or btnp(⬅️)) r_sng*=-1
		if(i < 1) i = 3
		if(i > 3) i = 1
		row_i = r_sng*i
	end
end

function draw_health(actor,y)
	local hp,mana,used_mana=actor.v_hp,actor.mana,actor.used_mana
	local t=actor.damaged_at and time()-actor.damaged_at

	local x=health_x
	local hp_x=health_x
	local p=hp/20
	ovalfill(hp_x,y,hp_x+20,y+20,0)
	oval(hp_x,y,hp_x+20,y+20,7)
	clip(0,y+(1-p)*20,128,128)
	ovalfill(hp_x+3,y+3,hp_x+17,y+17,8)
	clip(0,0,128,128)
	ovalfill(hp_x+5,y+5,hp_x+8,y+8,7)
	ovalfill(hp_x+10,y+10,hp_x+15,y+15,7)
	print(flr(hp),hp_x+10-2*#tostr(flr(hp)),y+22,8)

	p=mana/7
	x=128-x-20
	t=actor.mana_flash_at and time()-actor.mana_flash_at
	if(t and t<.6)x+=sin(t*10)
	ovalfill(x,y,x+20,y+20,0)
	oval(x,y,x+20,y+20,7)
	clip(0,y+(1-p)*20,128,128)
	ovalfill(x+3,y+3,x+17,y+17,12)
	clip(0,0,128,128)
	ovalfill(x+5,y+5,x+8,y+8,7)
	ovalfill(x+10,y+10,x+15,y+15,7)
	local str=
		tostr(mana).."/"..tostr(mana+used_mana)
	print(str,x+10-2*#str,y+22,t and t<.6 and 8 or 12)

end
-->8
--cards

types={
	beast=3,
	ghost=8,
	object=4,
	elemental=12,
}
local bones={name="bones",s=23,atk=1,def=6,cost=2, type="ghost"}
goblin={
	name="goblin",s=53,atk=3,def=5,cost=6,type="beast",
	desc="summon goblin in every row", on_summon=function(actor,rc,row_i)
 	local rows={}
 	for i=1,3 do
 		if #actor.rows[i]<5 and i!=abs(row_i) then
 			gl_summon(actor, goblin, i, true)
 		end
 	end
 end
	}

cards={
 {name="devil",s=1,atk=1,def=5,cost=1, type="beast"},
 {name="spirit",s=3,atk=1,def=5,cost=2, type="ghost"},
 {name="blade",s=5,atk=3,def=4,cost=2, type="object"},
 {name="orb",s=7,atk=2,def=6,cost=1, type="object"},
 {name="golem",s=9,atk=3,def=12,cost=3, type="object"},
 {name="swarm",s=11,atk=2,def=2,cost=1, type="beast", desc="may draw swarm", on_summon=function(actor) 
 	if(rnd()>.5)add_to_hand(actor.hand, cards[6])
 end},
 {name="jelpi",s=13,atk=1,def=8,cost=3, type="beast", desc="heal 4", on_summon=function(actor)
 actor.hp+=4
 actor.damaged_at=time()
 end },
 {name="imp",s=17,atk=2,def=3,cost=1, type="beast"},
 {name="bat",s=19,atk=3,def=2,cost=2, type="beast"},
 {name="wil'o",s=21,atk=3,def=8,cost=4, type="ghost"},
 bones,
 {name="furniture",s=25,atk=1,def=6,cost=0, type="object"},
 {name="'geist",s=27,atk=3,def=10,cost=5, type="ghost"},
 {name="skelly",s=29,atk=2,def=8,cost=5, type="ghost", desc="summon bones", on_summon=function(actor)
 	local rows={}
 	for i=1,3 do
 		if #actor.rows[i]<5 then
 			add(rows,i)
 		end
 	end
 	local row=rnd(rows)
 	if(row)gl_summon(actor, bones, row, true)
 end},

 {name="slime",s=33,atk=1,def=8,cost=2, type="beast"},
 {name="blinky",s=35,atk=1,def=8,cost=2,type="ghost"},

 {name="candle",s=37,atk=2,def=2,cost=2, type="object", desc="+1 mana", on_summon=function(actor) if(actor.mana+actor.used_mana<6)actor.mana+=1 end},
 {name="snake",s=39,atk=3,def=3,cost=2, type="beast"},
 {name="'shroom",s=41,atk=1,def=6,cost=2, type="beast"},
 {name="lich",s=43,atk=3,def=14,cost=6, type="ghost"},
 {name="zap",s=45,atk=3,def=1,cost=3, type="elemental",
  desc="clear row",
  on_summon=function(actor,this,row_i)
  for _, row in pairs({opp.rows[row_i], player.rows[row_i]}) do
   for rc in all(row) do
   	if rc!=this then
	    rc.hp = 0
	    rc.damaged_at = time()
	    sfx(11)
	    for j = 1, 24 do yield() end
   	end
   end    
   clear_dead()
  end
 end,
 ai_will_play=function(actor)
 	local score=0
 	for _, row in pairs({opp.rows[row_i], player.rows[row_i]}) do
   for rc in all(row) do
    local mult=row==opp.rows[row_i]and-1or 1
    score+=mult*rc.c.cost*rc.hp/rc.c.def
   end
 	end
		return score>=3
 end},
 {name="eye",s=49,atk=2,def=6,cost=4, type="beast", desc="animates all your objects", on_summon=function(actor)
		for i=1,3 do
	  local row = actor.rows[i]
   for rc in all(row) do
    if rc.c.type == "object" and not rc.possessed then
     rc.possessed =true
     rc.possessed_at = time()
     sfx(14)
     for j = 1, 15 do yield() end
    end
	  end
		end
 end,
 ai_will_play=function(actor)
 	local score=0
 	for i=1,3 do
	  local row = actor.rows[i]
   for rc in all(row) do
    if rc.c.type == "object" and not rc.possessed then
    	score+=rc.c.cost
    end
	  end
		end
		return score>=4
 end},

 {name="relic",s=51,atk=1,def=5,cost=3, type="object", desc="kill all ghosts", on_summon=function(actor)
		for i=1,3 do
	  for _, row in pairs({opp.rows[i], player.rows[i]}) do
    for rc in all(row) do
     if rc.c.type == "ghost" then
      rc.hp = 0
      rc.damaged_at = time()
      sfx(11)
      for j = 1, 24 do yield() end
      clear_dead()
     end
    end
	  end
		end
 end,
 ai_will_play=function(actor)
 	local score=0
 	for i=1,3 do
	  for row in all({opp.rows[i], player.rows[i]}) do
    local mult=row==opp.rows[i] and -1 or 1
    for rc in all(row) do
     if rc.c.type == "ghost" then
     	score+=mult*rc.c.cost*rc.hp/rc.c.def
     end
    end
	  end
		end
		return score>=3
 end},
	goblin,
	{name="flame",s=55,atk=3,def=3,cost=2, type="elemental", desc="2 damage to all foes", on_summon=function(actor)
		local foe=(actor==player) and opp or player
		for i=1,3 do
			local row=foe.rows[i]
   for rc in all(row) do
     rc.hp -= 2
     rc.damaged_at = time()
   end
		end
  sfx(11)
  for j = 1, 24 do yield() end
  clear_dead()
 end,
 ai_will_play=function(actor)
 	local score=0
 	local foe=(actor==player) and opp or player
		for i=1,3 do
			local row=foe.rows[i]
   for rc in all(row) do
     score+=(rc.hp<=2) and rc.c.cost or 1
   end
		end
		return score>=4
 end}
}
-->8
function lerp(tar,pos,perc)
 return (1-perc)*tar + perc*pos;
end
-->8
--game
hand_i = 1

function gl_new_game()
	player.hand={}
	opp.hand={}
	player.rows={{},{},{}}
	opp.rows={{},{},{}}
	player.hp=20
	opp.hp=player.hp
	player.v_hp=player.hp
	opp.v_hp=opp.hp
	opp.mana=0
	player.mana=0
	opp.used_mana=0
	player.used_mana=0
	player.turn_1=true
	add_to_hand(player.hand, "endturn")
	for i=1,6 do
		yield()
		add_to_hand(player.hand, rnd(cards))
		add_to_hand(opp.hand, rnd(cards))
	end

end

player={
	hand={},
	rows={},
	pick_card=function()
			player_input="hand"
			yield()
			while true do
				if btnp(❎) then
					local c=player.hand[hand_i].c
					if c!="endturn" and c.cost > player.mana then
						sfx(12)
						player.mana_flash_at=time()
					else
					player_input=nil
						return hand_i
					end
				end
				yield()
			end
	end,
	select_row=function()
		player_input="rows"
		row_i=-1
		yield()
		while true do
			if btnp(🅾️) then
				return "back"
			end
			if btnp(❎) then
				if #player.rows[abs(row_i)]>=5 then
					sfx(12)
				else
					player_input=nil
					return row_i
				end
			end
			yield()
		end
	end
}
opp={
	hand={},
	rows={},
	pick_card=function(self)
			for i=0,10 do
				yield()
			end
			local opts={}
			local highest_cost=-1
			for i,hc in ipairs(self.hand) do
				local c=hc.c
				if c.cost <= self.mana
				and (c.ai_will_play == nil or c.ai_will_play(opp))
				 then
				 if c.cost>highest_cost then
				 	highest_cost=c.cost
				 	opts={}
				 end	
					add(opts, i)
				end
			end
			return rnd(opts)
	end,
	select_row=function(self, c)
		local row_choice=nil
		local defensive={} -- rows where opp has no defenders
		local unprotected={} -- rows which protect an unprotected row
		local aggressive={} -- rows which attack an unprotected row
		local valid={} -- non empty rows
		local inanimate=false
		for i=1,3 do
		local row = self.rows[i]
   		if #row<5 then 
			add(valid, i)
			local player_row = player.rows[i]
			local player_atk = player_row[#player_row]
			if not can_attack(player_atk, player) then
				player_atk=nil
			end
			local pot_rc = {c=c, hp=c.def}
			pot_rc.possessed = false --todo c.type=="object" and ghost in `row`
			
			local opp_atk = pot_rc
			if not can_attack(opp_atk, opp) then
				debug="here"
				opp_atk=nil
			end
			local opp_def = player_atk and get_defender(row, player_atk)
			local pot_opp_def = player_atk and get_defender(imut_add(row, pot_rc), player_atk)
			local player_def = opp_atk and get_defender(player_row, opp_atk)
			if player_atk and not opp_def and pot_opp_def then
				add(unprotected,i) -- The player is attacking this row, there is currently no defender, but there will be with the potential row-card
			end
			if not player_def then
				add(aggressive, i) -- The player has no defenses here
			end
			if #row == 0 then
				add(defensive, i) -- The opponent has no defenses here
			end
		end
	end
	if opp.hp > player.hp and #aggressive>0 then
		row_choice=rnd(aggressive)
	elseif #unprotected>0 then
		row_choice=rnd(unprotected)
	elseif #defensive>0 then
		row_choice=rnd(defensive)
	else
		return rnd(valid)
	end
	local row= opp.rows[abs(row_choice)]
	local old_opp_atk = row[#row]
	local pot_rc = {c=c, hp=c.def}
	local pot_opp_atk = pot_rc
	pot_opp_atk.possessed = false --todo c.type=="object" and ghost in `row`
	if not can_attack(pot_opp_atk, opp) then
		pot_opp_atk=nil
	end
	if(pot_opp_atk==nil)return -row_choice --if pot_rc can't attack, always put at back
	local old_opp_atk_score = 
		(old_opp_atk and can_attack(old_opp_atk, opp))
		and old_opp_atk.c.atk
		or 0
	if(c.atk>=old_opp_atk_score)return row_choice
	if(c.def>=8)return -row_choice
	return rnd({1,-1})*row_choice
end
}
function game_logic()
	gl_new_game()
	local actor=player
	while true do
		add_to_hand(actor.hand, rnd(cards))

		if(actor.mana<6)actor.mana+=1
		actor.mana+=actor.used_mana
		actor.used_mana=0
		
		while true do
			local card_i=actor:pick_card()
			if card_i == nil then
				break
			end			
			local c=actor.hand[card_i].c
			if c == "endturn" then
				break
			end	
			local row=actor:select_row(c)
			if row!="back" and c then
				deli(actor.hand, card_i)
				gl_summon(actor, c, row)
			end
		end
		
		for i=1,3 do
			gl_attack(player.rows[i], opp.rows[i], actor)
			if player.hp<=0 then
				game_over="game over"	
				return
			end
			if opp.hp<=0 then
				game_over="you win"
				return
			end
		end
		
		actor.turn_1=false
		actor = actor==player
			and opp 
			or player
	end
end


function gl_summon(actor,c,row_i, special)
	yield()
	if not special then
		actor.mana-=c.cost
		actor.used_mana+=c.cost
	end
	local rc= {
			c=c,
			hp=c.def,
			summoned_at=time()
		}
		local row = actor.rows[abs(row_i)]
	add(
		row,
		rc,
		row_i < 0 and 1 or #row+1
	)
	sfx(13)
	for i=0,30*.8 do
		yield()
	end
	if c.type=="ghost" then
		for other in all(row) do
			if other.c.type=="object" and not other.possessed then
				other.possessed=true
				other.possessed_at=time()
				sfx(14)
				for i=0,30*.5 do
					yield()
				end
			end
		end
	end
	
	if c.type=="object" then
		for other in all(row) do
			if other.c.type=="ghost" and not other.possessed then
				rc.possessed=true
				rc.possessed_at=time()
				sfx(14)
				for i=0,30*.5 do
					yield()
				end
				break
			end
		end
	end
	
	if not special and  c.on_summon then
		rc.ability_at=time()
		sfx(15)
		for i=0,30*.5 do
			yield()
		end
		c.on_summon(actor, rc, row_i)
	end
end


function can_attack(rc, actor)
	if not rc or actor==player and actor.turn_1 then
		return false
	end
 return rc.possessed or rc.c.type!="object"
end

function get_defender(row, attacker)
 if attacker.c.type!="ghost" then
 	return row[#row]
 end
 local result=nil
 for _, rc in pairs(row) do
   if rc.c.type=="beast" 
   or (
   	rc.c.type=="object" and
   	rc.possessed
   ) then
    --pass
   else
    result=rc
   end
 end
 return result
end

function gl_attack(player_row, opp_row, actor)
	local player_atk,
		opp_atk=
		player_row[#player_row],
		opp_row[#opp_row]
				
	if player_atk and not can_attack(player_atk, actor) then
		player_atk = nil
	end
	if opp_atk and not can_attack(opp_atk, actor) then
		opp_atk = nil
	end
	
	local player_def,opp_def=
		opp_atk and get_defender(player_row, opp_atk),
		player_atk and get_defender(opp_row, player_atk)

	
	if player_atk then
		player_atk.attacking_at = time()
	end
	if opp_atk then
		opp_atk.attacking_at = time()
	end
	if opp_atk or player_atk then
		sfx(10)				
		for j=0,30*.5 do
			yield()
		end
	end
	local any_damage=false
	if opp_def and player_atk then
		opp_def.hp -= player_atk.c.atk
		opp_def.damaged_at = time()
		any_damage=true
	end
	if player_def and opp_atk then
		player_def.hp -= opp_atk.c.atk
		player_def.damaged_at = time()
		any_damage=true
	end
	if any_damage then
			sfx(11)	
			for j=0,30*.8 do
					yield()
			end			
	end
	if player_atk and not opp_def then
		opp.hp -= player_atk.c.atk
		opp.damaged_at=time()
		for i=0,30*.5 do yield()end
	end
	if opp_atk and not player_def then
		player.hp -= opp_atk.c.atk
		player.damaged_at=time()
		for i=0,30*.5 do yield()end
	end
	clear_dead()
end

function clear_dead()
	for i=1,3 do
 	for rc in all(opp.rows[i]) do
 		if rc.hp <= 0 then	
				del(opp.rows[i], rc)
			end
		end
 	for rc in all(player.rows[i]) do	
 	 if rc.hp <= 0 then	
				del(player.rows[i], rc)
			end
		end
	end
end
-->8
--util
function draw_pentagram(x1, y1, x2, y2, angle, col)
 oval(x1, y1, x2, y2, col)
 local cx, cy, w, h = (x1 + x2) / 2, (y1 + y2) / 2, (x2 - x1) / 2, (y2 - y1) / 2
 local step = 2 / 5
 for i = 0, 4 do
  local a_a, a_b = angle + step * i, angle + step * (i - 1)
  local x_a, y_a = sin(a_a) * w + cx, cos(a_a) * h + cy
  local x_b, y_b = sin(a_b) * w + cx, cos(a_b) * h + cy
  line(x_a, y_a, x_b, y_b, col)
 end
end
function imut_add(list,value)
	local result={}
	for v in all(list) do
		add(result, v)
	end
	add(result, value)
	return result
end

function print_trace(st)
    local l=split(st)
    for li=1,#l do
        local s=l[li]
       
        if sub(s,1,32)=="\t[string \"-- pico-8 header...\"]:" then
            -- strip off the prefix
            s="\tline "..sub(s,33)
            -- simplify the root fn
            if sub(s,11,48)=="in function <[string \"-- pico-8 header" then
                s=sub(s,1,10).."in function '<root>'"
            end
        elseif sub(s,1,5)=="\t[\67]:" then
            -- lua's internal c api
            s="\tline ??:"..sub(s,6)
        end
       
        print_wrap(s)
    end
end

-- split a string into [an
-- existing] table based on a
-- single delimiting character
--
function split(v,d,t)
    d,t="\n",t or {}
    local s,b,e="",1,1
    while e<=#v do
        local c=sub(v,e,e)
        e+=1
        if c==d then
            add(t,s..sub(v,b,e-2))
            b,s=e,""
        end
    end
    add(t,s..sub(v,b,e-1))
    return t
end

-- print with simple line wrap
--
-- note: this function assumes
-- every character in the string
-- is a single-width printable.
-- because i'm lazy. #dealwithit
--
function print_wrap(s,w)
    w=w or 32
    for i=1,#s+1,w do
        print(sub(s,i,i+w-1))
    end
end
__gfx__
00000000000707000000000000007770000000000000007700000000007777000077770000000000000000000770770000000000070007000070007000000000
00000000007777700007070000077777000077700000078700000077078888700788887000000000000000000770000007707700077777700077777700000000
00700700077787800077777000078778000777770000787000000787787888877888778700077700000777000007777007700000078777800078777800000000
00077000077777770777878000777777007787780007870000007870788877877888778700787800007878007007878000077770077777700077777700000000
00077000077777700777777707777770007777770778700000078700788877877878888700777700707777070777777770078780000000000000000000000000
00700700777777007777777007777700077777700077000007787000078888700788887007777770077777707777700077777777077770000077770000000000
00000000777777007777770077770000777777000707000000770000007777000077770070777707007777007707070077770000077777000777770000000000
00000000070070000700070077000000777000000000000007070000077777700777777007707770077077707007070070070700070000000000070000000000
6667777e000700070000000000000000077007700770000070000007000077700000000000000000007000000077770000000000000777000000000000000000
e66777ee000700070007000770700707777007770770007000770000000787800000077707000000007000000777777000777700007878000007770000000000
ee677eee070777707007000770777707770000770000770000770000000777700700787807000000070777007777700707777770007777000078780000000000
eee7eeee700787807007777070787807707007070007887000007700070070707700777707077700070777000077700777777007000707000077770000000000
eeeeeeee700077707007878070070707707777070007887070078870770000000070070707077700070777000700700700777007000000007007070700000000
eeeeeeee777770007777777077000077707878077000770000078870007000000007700007077700077777000777077007007007070770700000700000000000
eeeeeeee777777007777770077700777700707070000000000007700000770000007000007777700070007000777700077770770000000000000000000000000
eeeeeeee070007000700070007700770000000000070007000000007000700000000000007000700000000007770000077700000007007000700007000000000
eeeeeeee077777000077700000077700000000000000700000000000000000000000000000777700000000000777777000000000000000000077770000000000
7eeeeeee077778700777870000777770007770000000700000007000000000007000000007007770007777007777777707777770007777000700007000000000
77eeeeee787777770777777007777777077777000000000000000000700007777000000007007070070077707700770077777777007878000708087000000000
777eeeee777007777877777707778778777777700007770000077700700078780000077707777770070070707708770877777777000777000070007000000000
7777eeee707007077770070707777777777877800007770000077700000077777000787800000000077777707777707777007700000777000070007000000000
666eeeee700007077070070707777777777777700707770007077700700077707000777700787800007878000077777077777077000770000070070000000000
66eeeeee707007077000770700707070777777700770777007700770700777707707777000777700007777000000707000777770007770000700700000000000
6eeeeeee777777777777777700000000707070700777777007777770777777000777770000700700070000700000000000007070007000000707000000000000
07000000000000000000000000000000007070700000000070000000007000000007000000000000000000000000000000000000007000000007000000000000
70700000000000000000000007070070000000007077770070000000007700000007700000000000000000000000000000000000007700000007700000000000
07000000000777000000000000000000070000707070000000777700707770000007770000000000000000000000000000000000707770000007770000000000
00000000007777700070000070000007000000000077070070700007777777007077770000000000000000000000000000000000777777007077770000000000
00000000007778700007777000000000007887007000000700770700777877707777777000000000000000000000000000000000777877707777777000000000
00000000007777700070000007000070008778000077770000000000778877707777787000000000000000000000000000000000778877707777787000000000
00000000000777000000000000077000008778000077770000777700778887707787887000000000000000000000000000000000778887707787887000000000
00000000000000000000000000077000000880000070070000700700077888700788887000000000000000000000000000000000077888700788887000000000
eee7770770777eeeee777777777777ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ee700078870007eee70000000000007e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e70077077077007e7077777777777707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70070000000070077070000000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70700000000007077070000000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70700000000007077070000000070707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70700000000007077070000000770707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70700000000007077070000007700707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70700000000007077070700077000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70700000000007077070770770000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70700000000007077070077700000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70700000000007077070007000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70070000000070077070000000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e70077777777007e7077777777777707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ee700000000007eee70000000000007e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee7777777777eeeee777777777777ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888eeeeee888eeeeee888eeeeee888777777888eeeeee888888888888888888888888888888888888ff8ff8888228822888222822888888822888888228888
8888ee888ee88ee88eee88ee888ee88778887788ee8e8ee88888888888888888888888888888888888ff888ff888222222888222822888882282888888222888
888eee8e8ee8eeee8eee8eeeee8ee8777778778eee8e8ee88888e88888888888888888888888888888ff888ff888282282888222888888228882888888288888
888eee8e8ee8eeee8eee8eee888ee8777788778eee888ee8888eee8888888888888888888888888888ff888ff888222222888888222888228882888822288888
888eee8e8ee8eeee8eee8eee8eeee8777778778eeeee8ee88888e88888888888888888888888888888ff888ff888822228888228222888882282888222288888
888eee888ee8eee888ee8eee888ee8777888778eeeee8ee888888888888888888888888888888888888ff8ff8888828828888228222888888822888222888888
888eeeeeeee8eeeeeeee8eeeeeeee8777777778eeeeeeee888888888888888888888888888888888888888888888888888888888888888888888888888888888
111111111eee11ee1eee1111166611111cc111111ccc11111ee111ee111111111111111111111111111111111111111111111111111111111111111111111111
111111111e111e1e1e1e11111161177711c11111111c11111e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111
111111111ee11e1e1ee111111161111111c1111111cc11111e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111
111111111e111e1e1e1e11111161177711c11171111c11111e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111
111111111e111ee11e1e1111166611111ccc17111ccc11111eee1ee1111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111e1111ee11ee1eee1e11111111661666166611111666116611111166166616661111166611661616116617711666117717711717117111661666
1111111111111e111e1e1e111e1e1e11111116161616161611111616161117771616161616161111161616161616161117111161111717111777171116161616
1111111111111e111e1e1e111eee1e11111116161666166611111661161111111616166616661111166116161616166617111161111717111717171116161666
1111111111111e111e1e1e111e1e1e11111116161611161111111616161117771616161116111111161616161666111617111161111717111777171116161611
1111111111111eee1ee111ee1e1e1eee111116611611161116661616116611111661161116111171161616611666166117711666117717711717117116611611
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111e1111ee11ee1eee1e11111116661611166616161666166611111666116611111666161116661616166616661111166611661616116617711666
1111111111111e111e1e1e111e1e1e11111116161611161616161611161611111616161117771616161116161616161116161111161616161616161117111161
1111111111111e111e1e1e111eee1e11111116661611166616661661166111111661161111111666161116661666166116611111166116161616166617111161
1111111111111e111e1e1e111e1e1e11111116111611161611161611161611111616161117771611161116161116161116161111161616161666111617111161
1111111111111eee1ee111ee1e1e1eee111116111666161616661666161616661616116611111611166616161666166616161171161616611666166117711666
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111eee1eee1111116616661666111116661166111111ee1eee111116661611166616161666166611111666116611111eee1e1e1eee1ee111111111
11111111111111e11e11111116161616161611111616161111111e1e1e1e1111161616111616161616111616111116161611111111e11e1e1e111e1e11111111
11111111111111e11ee1111116161666166611111661161111111e1e1ee11111166616111666166616611661111116611611111111e11eee1ee11e1e11111111
11111111111111e11e11111116161611161111111616161111111e1e1e1e1111161116111616111616111616111116161611111111e11e1e1e111e1e11111111
1111111111111eee1e11111116611611161116661616116611111ee11e1e1111161116661616166616661616166616161166111111e11e1e1eee1e1e11111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1eee111111661666166611111666116611111eee1e1e1eee1ee111111111111111111111111111111111111111111111111111111111
111111111111111111e11e111111161616161616111116161611111111e11e1e1e111e1e11111111111111111111111111111111111111111111111111111111
111111111111111111e11ee11111161616661666111116611611111111e11eee1ee11e1e11111111111111111111111111111111111111111111111111111111
111111111111111111e11e111111161616111611111116161611111111e11e1e1e111e1e11111111111111111111111111111111111111111111111111111111
11111111111111111eee1e111111166116111611166616161166111111e11e1e1eee1e1e11111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111661666166611111666116611111666166616661666116616161666166111661111166616661111111111111bbb1bbb1bbb1bbb1171
11111111111111111111161616161616111116161611111116161161116116161611161611611616161111111616116111111777111111b111b11bbb1b111711
11111111111111111111161616661666111116611611111116661161116116661611166111611616161111111666116111111111111111b111b11b1b1bb11711
11111111111111111111161616111611111116161611111116161161116116161611161611611616161611111616116111111777111111b111b11b1b1b111711
11111111111111111111166116111611166616161166117116161161116116161166161616661616166616661616116111111111111111b11bbb1b1b1bbb1171
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1ee11ee11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111e111e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111ee11e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111e111e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1e1e1eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1eee111116661611166616161666166611111666116611111eee1e1e1eee1ee111111111111111111111111111111111111111111111
111111111111111111e11e111111161616111616161616111616111116161611111111e11e1e1e111e1e11111111111111111111111111111111111111111111
111111111111111111e11ee11111166616111666166616611661111116611611111111e11eee1ee11e1e11111111111111111111111111111111111111111111
111111111111111111e11e111111161116111616111616111616111116161611111111e11e1e1e111e1e11111111111111111111111111111111111111111111
11111111111111111eee1e111111161116661616166616661616166616161166111111e11e1e1eee1e1e11111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111116661611166616161666166611111666116611111666166616661666116616161666166111661111166616661111111111111bbb1bbb
11111111111111111111161616111616161616111616111116161611111116161161116116161611161611611616161111111616116111111777111111b111b1
11111111111111111111166616111666166616611661111116611611111116661161116116661611166111611616161111111666116111111111111111b111b1
11111111111111111111161116111616111616111616111116161611111116161161116116161611161611611616161611111616116111111777111111b111b1
11111111111111111111161116661616166616661616166616161166117116161161116116161166161616661616166616661616116111111111111111b11bbb
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1ee11ee11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111e111e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111ee11e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111e111e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1e1e1eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111118888811111111111111111111111111111111111111111111111111111111111
11111111111111111eee11ee1eee1111166611111ccc11111ccc1ccc171711118888866111661111111111111111111111111111111111111111111111111111
11111111111111111e111e1e1e1e1111116117771c1c1111111c1c1c117111118888861616161111111111111111111111111111111111111111111111111111
11111111111111111ee11e1e1ee11111116111111c1c111111cc1c1c177711118888861616161111111111111111111111111111111111111111111111111111
11111111111111111e111e1e1e1e1111116117771c1c1171111c1c1c111111118888861616161111111111111111111111111111111111111111111111111111
11111111111111111e111ee11e1e1111166111111ccc17111ccc1ccc117111718888866616611111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111117711111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111b1b1bbb1bbb1b111bb11171117111111111117771111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111b1b11b11b111b111b1b1711111711111111117777111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111bbb11b11bb11b111b1b1711111711111111117711111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111b11b11b111b111b1b1711111711111111111171111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111bbb1bbb1bbb1bbb1bbb1171117111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1ee11ee11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111e111e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111ee11e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111e111e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1e1e1eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111eee1eee111116661611166616161666166611111666116611111eee1ee11ee1111111661666166611111666116611111eee1e1e1eee1ee1
111111111111111111e11e11111116161611161616161611161611111616161111111e1e1e1e1e1e1111161616161616111116161611111111e11e1e1e111e1e
111111111111111111e11ee1111116661611166616661661166111111661161111111eee1e1e1e1e1111161616661666111116611611111111e11eee1ee11e1e
111111111111111111e11e11111116111611161611161611161611111616161111111e1e1e1e1e1e1111161616111611111116161611111111e11e1e1e111e1e
11111111111111111eee1e11111116111666161616661666161616661616116611111e1e1e1e1eee1111166116111611166616161166111111e11e1e1eee1e1e
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111166616111666161616661666111116661166111116161666111111111111111111661666166611111666116611111166111116661666
11111111111111111111161616111616161616111616111116161611111116161616111111111777111116161616161611111616161111111611111116161161
11111111111111111111166616111666166616611661111116611611111116661666111117771111111116161666166611111661161111111611111116661161
11111111111111111111161116111616111616111616111116161611111116161611111111111777111116161611161111111616161111111611111116161161
11111111111111111111161116661616166616661616166616161166117116161611111111111111111116611611161116661616116611711166117116161161
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111166616111666161616661666111116661166111116611666166616661166166616611111166616661111111111111bbb1bbb1bbb1bbb
111111111111111111111616161116161616161116161111161616111111161616161666161616111611161611111616116111111777111111b111b11bbb1b11
111111111111111111111666161116661666166116611111166116111111161616661616166616111661161611111666116111111111111111b111b11b1b1bb1
111111111111111111111611161116161116161116161111161616111111161616161616161616161611161611111616116111111777111111b111b11b1b1b11
111111111111111111111611166616161666166616161666161611661171166616161616161616661666166616661616116111111111111111b11bbb1b1b1bbb
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111116616661666111116661166111116161666111111111111111116661611166616161666166611111666116611111166111116661666
11111111111111111111161616161616111116161611111116161616111111111777111116161611161616161611161611111616161111111611111116161161
11111111111111111111161616661666111116611611111116661666111117771111111116661611166616661661166111111661161111111611111116661161
11111111111111111111161616111611111116161611111116161611111111111777111116111611161611161611161611111616161111111611111116161161
11111111111111111111166116111611166616161166117116161611111111111111111116111666161616661666161616661616116611711166117116161161
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111116616661666111116661166111116611666166616661166166616611111166616661111111111111bbb1bbb1bbb1bbb117111711111
111111111111111111111616161616161111161616111111161616161666161616111611161611111616116111111777111111b111b11bbb1b11171111171111
111111111111111111111616166616661111166116111111161616661616166616111661161611111666116111111111111111b111b11b1b1bb1171111171111
111111111111111111111616161116111111161616111111161616161616161616161611161611111616116111111777111111b111b11b1b1b11171111171111
111111111111111111111661161116111666161611661171166616161616161616661666166616661616116111111111111111b11bbb1b1b1bbb117111711111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
82888222822882228888828882228882822882228222888888888888888888888888888888888888888882288222822282228882822282288222822288866688
82888828828282888888828882828828882882828282888888888888888888888888888888888888888888288288828882888828828288288282888288888888
82888828828282288888822282228828882882828222888888888888888888888888888888888888888888288222822282228828822288288222822288822288
82888828828282888888828288828828882882828282888888888888888888888888888888888888888888288882888288828828828288288882828888888888
82228222828282228888822288828288822282228222888888888888888888888888888888888888888882228222822282228288822282228882822288822288
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

__sfx__
0001000037650236501a6501c6501e650256503365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100002f650236501d6501c6502b6503f6500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010000131501a150203500e25030650246501f6501c6501865015650116500e6500b650096501250011500376003a6000760006600000000000000000000000000000000000000000000000000000000000000
0001000028070330702c0602906032050270502705030050300402c040250402d0402204024040320402c03029030310302c020270202b0202f01028010210102a010290102c0003200000000000000000000000
000400000b3700b3700b3700437004370043702700030000171002c000250002d0001710024000171002c00017100310001710017100171002f000171002100017100171001710011100111000f1000f1000f100
00030000013100332003320043300433005330053300634007340073400734008340093500a3500c3500f3601136014360193601f360327703275024740247202471000000000000000000000000000000000000
000300001f0502705030050360502c050090500405000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00030000000003715034150361502f1503b1503215033300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
